/*
 * Copyright 2019 Hippo Seven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import java.util.zip.CRC32

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 31
    ndkVersion "21.1.6352462"
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        applicationId 'com.hippo.quickjs.test.android'
        minSdkVersion 18
        targetSdkVersion 31
        versionCode 1
        versionName '1.0'
        externalNativeBuild {
            cmake {
                cppFlags "-DANDROID_PLATFORM=android-18 "
                arguments '-DCMAKE_VERBOSE_MAKEFILE=ON -DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON  -DCMAKE_CXX_FLAGS=-llog'
//                arguments '-DCMAKE_VERBOSE_MAKEFILE=ON -DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON -DANDROID_PLATFORM=18'
            }
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
    sourceSets {
        main.assets.srcDirs += 'testassets'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    def hasReleaseKey = rootProject.file('release.keystore').exists()

    if (hasReleaseKey) {
        signingConfigs {
            release {
                def properties = new Properties()
                properties.load(rootProject.file('local.properties').newDataInputStream())
                storeFile file(properties.getProperty('RELEASE_STORE_PATH'))
                storePassword properties.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
                keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (hasReleaseKey) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            externalNativeBuild {
                cmake {
//                    arguments "-DCMAKE_VERBOSE_MAKEFILE=ON -DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON -DANDROID_PLATFORM=18"
                    arguments "-DCMAKE_VERBOSE_MAKEFILE=ON -DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON -DCMAKE_CXX_FLAGS=-llog"
                }
            }

        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'

        }
    }
    namespace 'com.hippo.quickjs.test.android'
}

tasks.register("bundleTestAssets", Zip) {
    doFirst {
        delete "${projectDir}/testassets"
        file("${projectDir}/testassets").mkdirs()
    }

    from "${rootProject.projectDir}/quickjs/quickjs"
    exclude '**/*.c', '**/*.h'
    archiveFileName.set("testassets.zip")
    destinationDirectory.set(file("${projectDir}/testassets"))

//    archiveFileName "testassets.zip"
//    archiveExtension "zip"
//    destinationDirectory file("${projectDir}/testassets")

    doLast {
        File testassets = file("${projectDir}/testassets/testassets.zip")
        CRC32 crc32 = new CRC32()
        testassets.eachByte 4096, { bytes, size ->
            crc32.update(bytes, 0, size)
        }
        new File("${projectDir}/testassets/testassets-${crc32.getValue()}.crc32").createNewFile()
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'net.lingala.zip4j:zip4j:1.3.2'
    implementation 'com.getkeepsafe.relinker:relinker:1.3.1'
}
project.afterEvaluate {
    generateDebugAssets.dependsOn 'bundleTestAssets'
    generateReleaseAssets.dependsOn 'bundleTestAssets'
    tasks.matching { it.name.contains("generateReleaseLintVitalReportModel") }.all {
        it.dependsOn("bundleTestAssets")
    }
    tasks.matching { it.name.contains("generateDebugLintReportModel") }.all {
        it.dependsOn("bundleTestAssets")
    }
    tasks.matching { it.name.contains("lintAnalyzeDebug") }.all {
        it.dependsOn("bundleTestAssets")
    }

}

